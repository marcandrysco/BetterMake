#!/bin/sh

##
# extract Function
#   Given a chunk of a file, it extracts the quoted option value given the
#   option name.
# Parameters
#   string text
#     The input text to be parsed.
#   string optname
#     The name of the option to extract.
#.

extract()
{
	printf %s "$1" | sed -n 's/^\s'"$2"'\s*"\(.*\)"\s*$/\1/p'
}

##
# process_sources Function
#   Inputs the sources configuration file and produces the corresponding
#   makefile.
# Parameters
#   string infile
#     The name of the input sources file.
#   string outfile
#     The name of the output makefile.
#.

process_sources()
{
	local remaining="`cat "$1"`"

	rm -f "$2"

	while [ 1 ]
	do
		local copy="`printf %s "$remaining" | sed '/^\s*EndTarget\s*$/,$d'`"
		test "$copy" = "$remaining" && break

		local target="`extract "$copy" Name`"
		local type="`extract "$copy" Type`"
		local local="`extract "$copy" Local`"
		local version="`extract "$copy" Version`"
		local sources="`extract "$copy" Source`"
		local obj="`printf %s "$sources" | sed 's/.c\(pp\)\?$/.o/'`"
		obj="`echo -n $obj`"

		test -z "$version" && version="0.0.0"
		local shortversion="${version%%.*}"

		case "$local" in
			[Tt][Rr][Uu][Ee] | [Yy][Ee][Ss] )
				local prefix="$HOME"
				local cflags=" -I\"$HOME/include\""
				local ldflags=" -L\"$HOME/lib\" -Wl,-rpath=\"$HOME/lib\""
				;;

			[Ff][Aa][Ll][Ss][Ee] | [Nn][Oo] | "")
				local prefix="/usr"
				local cflags=""
				local ldflags=""
				;;

			*)
				echo "invalid local value \"$local\"" >&2
				exit 1
		esac

		local bindir="$prefix/bin"
		local libdir="$prefix/lib"

		case "$type" in
			"Application" | "" )
				printf 'bmake_all: %s\n\n' "$target" >> "$2"
				printf '%s: %s\n\t%s\n\n' "$target" "$obj" "`printf '$(LD)%s $^ -o $@ $(LDFLAGS)\n' "$ldflags"`" >> "$2"
				printf 'bmake_install: %s_install\n\n' "$target" >> "$2"
				printf '%s_install:\n\tinstall --mode 0755 -D %s "%s/%s"\n\n' "$target" "$target" "$bindir" "$target" >> "$2"
				local clean="`printf '\trm -f %s' "$target"`"
				local ldextra=''
				;;

			"Library")
				printf 'bmake_all: lib%s.a lib%s.so.%s\n\n' "$target" "$target" "$version" >> "$2"
				printf 'lib%s.a: %s\n\t%s\n\n' "$target" "$obj" "`printf 'ar rcs $@ $^'`" >> "$2"
				printf 'lib%s.so.%s: %s\n\t%s\n\n' "$target" "$version" "$obj" \
					"`printf '$(CC)%s -fpic -shared -Wl,-soname,lib%s.so.%s -o $@ $^' "$ldflags" "$target" "$shortversion"`" >> "$2"
				printf 'bmake_install: lib%s_install\n\n' "$target" >> "$2"
				printf 'lib%s_install: lib%s.a lib%s.so.%s\n' "$target" "$target" "$target" "$version" >> "$2"
				printf '\tinstall --mode 0644 -D lib%s.a "%s/lib%s.a"\n' "$target" "$libdir" "$target" >> "$2"
				printf '\tinstall --mode 0755 -D lib%s.so.%s "%s/lib%s.so.%s"\n' "$target" "$version" "$libdir" "$target" "$version" >> "$2"
				printf '\tln -s lib%s.so.%s "%s/lib%s.so"\n' "$target" "$version" "$libdir" "$target" >> "$2"
				printf '\tln -s lib%s.so.%s "%s/lib%s.so.%s"\n\n' "$target" "$version" "$libdir" "$target" "$shortversion" >> "$2"
				local clean="`printf '\trm -f lib%s.a lib%s.so.%s' "$target" "$target" "$version"`"
				local ldextra=' -fpic'
				;;

			*)
				echo "invalid target type" >&2 ; exit 1 ;;
		esac

		for file in $sources
		do
			printf '%s: %s\n\t$(bmake_PRECC)\n\t$(CC)%s -c $< -o $@ $(CFLAGS)%s\n\n' "`printf %s "$file" | sed 's/.c\(pp\)\?$/.o/'`" "$file" "$cflags" "$ldextra" >> "$2"
		done

		printf 'bmake_clean: %s_clean\n\n' "$target" >> "$2"
		printf '%s_clean:\n%s\n\trm -f %s\n\n.PHONY: %s_clean\n\n' "$target" "$clean" "$obj" "$target" >> "$2"

		remaining=`printf %s "$remaining" | sed '1,/^\s*EndTarget\s*$/d'`
	done
}

process_sources sources sources.mk

config="config.h"
test -e "src" && config="src/$config"

unset host prefix

for opt in "$@"
do
	if [ -z "$optname" ] ; then
		if [ "$opt" != "${opt%%=*}" ] ; then
			optname=${opt%%=*}
			opt=${opt#*=} 
		else
			optname="$opt"
			unset opt
		fi
	fi

	case "$optname" in
		--build)
			test -z "$opt" && continue ; build="$opt" ;;
		--host)
			test -z "$opt" && continue ; host="$opt" ;;
		--prefix)
			test -z "$opt" && continue ; prefix="$opt" ;;
		*)
			echo "invalid option $optname"
			exit 1
			;;
	esac

	unset optname
done

test ! -z $optname && echo "'$optname' requires parameter" && exit 1

test -z "$prefix" && prefix="/usr/bin"

unset BMAKE_DECL

cat <<EOF > "$config"
#ifndef CONFIG_H
#define CONFIG_H
EOF

for script in mktests/[0-9][0-9]*
do
	test ! -f "$script" && continue
	rm -f mktests/tmp*
	. $script || exit $?
done
rm -f mktests/tmp*

echo "#endif" >> "$config"

reconf="$0"
for param in "$@" ; do reconf="$reconf '$param'" ; done
echo "$reconf" > config.status
chmod +x config.status

if [ -e "$make" ] ; then
	if ! rm -f "$make" < /dev/null > /dev/null 2> /dev/null ; then
		echo Unable to remove "$make"
		exit
	fi
fi

cat <<EOF > "Makefile"
# autogenerated by configure script
bmake_PRECC =
bmake_CFLAGS = 
bmake_LDFLAGS = 
bmake_reconfigure = $reconf
bmake_PREFIX = $prefix
$BMAKE_DECL
# end autogenerated content
EOF

cat "Makefile.in" >> "Makefile"

cat <<EOF >> "Makefile"
# autogenerated by configure script
bmake-all:

bmake-clean:
	rm Makefile $config
# end autogenerated content
EOF
