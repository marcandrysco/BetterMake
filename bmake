#!/bin/sh

sharedir="`dirname $0`/share"

##
# contains Function
#   Determine if a string contains a substring.
# Version
#   1.0
# Parameters
#   string str
#     The base string to check if it contains the substring.
#   string sub
#     The substring searched for in 'str'.
# Return Value
#   Returns success if found, failure otherwise.
#.

contains()
{
	test "$1" != "${1#*"$2"}"
}

##
# usage Function
#   Displays the usage information regarding the list of possible commands.
# Parameters
#   int fd = 1
#     Optional. The file descriptor number to send it to, often set to '2' for
#     error out.
#.

usage()
{
	if [ "$#" -eq 0 ] ; then
		fd=1
	else
		fd=$1
	fi

	cat <<EOF >&$fd
`basename "$0"` <command> [options]

Possible commands are:
  install
  update
  target add
  target remove
  target list
  source add
  source remove
  source list
  help
EOF
}

##
# getopt_long Function
#   Parses a list of options, retrieving all of the values and flags. The
#   returned data is valid POSIX shell code that should be evaluated in order
#   to obtain the desired parameters. For each long parameter, a variable is
#   created with that parameter's name. For all short parameters without a
#   long equivalent, then a variable with that single character is created.
#   All non-option parameters are skipped (anything that does not begin with a
#   dash).
# Version
#   1.0
# Parameters
#   string shortopts
#     A list of short options that are accepted. Options followed by a colon
#     denote that those options require values, otherwise the option is a flag
#     of '1' or '0'.
#   string longopt ...
#     A set of long options in the form 'o,optname' where 'o' is the short
#     option equivalent and 'optname' is the full long name.
#   -- args ...
#     After the string '--', all of the parameters are placed after it.
#     Generally the value '"$@"' should be passed.
# Printed
#   The returned text should be dirctly evaluated using the 'eval' built-in
#   function. All the parameters will be stored in their respective variables.
#   If an error occurs during processing, then the value 'err' will be set to
#   a text error message.
#.

getopt_long()
{
	local opt="$1" ; shift
	echo "$opt" | grep -E "^:" >/dev/null 2>/dev/null && warn="" || warn="yes"

	local param=" "
	while [ "$1" != "--" ]
	do
		param="$param $1 " ; shift
	done
	shift

	echo "params='';"
	local short="" ; local long=""

	for arg in "$@"
	do
		if [ -n "$short" ] ; then
			if [ -z "$long" ] ; then
				echo -n "$short='$arg';"
			else
				echo -n "$long='$arg';"
			fi

			short="" ; long=""

			continue
		fi

		case "$arg" in
		--*)
			long=`echo "$arg" | sed 's/--\([^=]*\)\(=.*\)\?/\1/'`
			short=`echo "$param" | sed -n "s/.* \\(.\\),$long .*/\1/p"`

			if [ -z "$short" ] && [ -n "$warn" ] ; then
				echo "err=\"invalid parameter '--$long'\";"
				return 1
			fi

			if echo "$opt" | grep "$short:" >/dev/null 2>/dev/null ; then
				test -n "${arg%%*=*}" && continue
				echo -n "$long='"`echo "${arg#*=}" | sed "s/'/'\\\\\\\\''/g"`"';"
			else
				if echo "$arg" | grep "=" >/dev/null 2>/dev/null && [ -n "warn" ]; then
					echo "err=\"parameter '-$short,--$long' does not take a value\";"
					return 1
				fi

				echo -n "$long=1;"
			fi

			short="" ; long=""
			;;

		-*)
			arg="${arg#-}"
			local needval=""
			while [ -n "$arg" ]
			do
				short=`echo $arg | head -c1`

				if ! contains "$opt" "$short" ; then
					echo "err=\"invalid parameter '-$short'\";"
					return 1
				fi

				long=`echo "$param" | sed -n "s/.* $short,\\([^ ]*\\) .*/\1/p"`
				arg=`echo $arg | tail -c+2`

				if ! contains "$opt" "$short:" ; then
					if [ -z "$long" ] ; then
						echo -n "$short=1;"
					else
						echo -n "$long=1;"
					fi

					continue
				fi

				if [ -n "$arg" ] ; then
					if [ -z "$long" ] ; then
						echo -n "$short='$arg';"
					else
						echo -n "$long='$arg';"
					fi
				else
					needval="1"
				fi

				break
			done

			if [ -z "$needval" ] ; then
				short="" ; long=""
			fi
			;;

		*)
			;;
		esac
	done

	if [ -n "$long" ] ; then
		echo "err=\"parameter '-$short,--$long' needs a value\";"
		return 1
	elif [ -n "$short" ] ; then
		echo "err=\"parameter '-$short' needs a value\";"
		return 1
	fi

	echo "err='';"
	return 0
}

##
# isscript Function
#   Test if the input file is a script, checking for a shebang.
# Version
#   1.0
# Parameters
#   string path
#     FIle path to test if it is a script.
# Return Value
#   Returns zero if it is a script, non-zero otherwise.
#.

isscript()
{
	read line < "$1"
	test -z "${line##"#!"*}"
}

##
# copyfile Function
#   Copy the file from the share directoy to the target output. The file is
#   prefixed with its MD5 checksum for consistency.
# Version
#   1.0
# Parameters
#   string filename
#     Source and target file name.
#   octal mode
#     Target file mode
#.

copyfile()
{
	local src="$sharedir/$1"

	test ! -f "$src" && return 1

	rm -f "$1"

	if isscript "$src" ; then head -n 1 "$src" >> "$1" ; fi

	echo "# Generated by BetterMake" >> "$1"
	echo "# md5sum: "`md5sum "$sharedir/$1" | head -c32` >> "$1"

	if isscript "$src" ; then
		tail -n +2 "$src" >> "$1"
	else
		echo >> "$1"
		cat "$sharedir/$1" >> "$1"
	fi

	test ! -z "$2" && chmod "$2" "$1"
	return 0
}

##
# checkfile Function
#   Check the file, determining if the MD5 checksum matches.
# Version
#   1.0
# Parameters
#   string filename
#     Source and target file name.
#   octal mode
#     Target file mode
# Return Value
#   True if they mach, false otherwise.
#.

checkfile()
{
	local md5=""
	local chk=""
	local dest="$1"

	while read line
	do
		md5="${line##"# md5sum: "}"
		test "$md5" != "$line" && break
	done < "$dest"

	if isscript "$dest" ; then
		chk="`sed '2,3d' "$dest" | md5sum | head -c32`"
	else
		chk="`sed '1,3d' "$dest" | md5sum | head -c32`"
	fi

	test "$md5" = "$chk"
}

quotify()
{
	echo "$1" | sed 's/"/\\"/g'
}

findtarget()
{
	target="`quotify "$2"`"
	grep -E "^[[:space:]]*Target[[:space:]]*\"$target\"[[:space:]]*$" "$1" >/dev/null 2>/dev/null
	return $?
}

##
# quote Function
#   Given the input string, it places it within single quotes, making sure that
#   any single quotes within the string are properly escaped.
# Version
#   1.0
# Parameters
#   string input
#     The input text.
# Printed
#   Prints out the quoted string.
#.

quote()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%\'*}"
		test "$piece" = "$str" && break
		printf "'%s'\\'" "$piece"
		str="${str#*\'}"
	done

	printf "'%s'" "$str"
}

##
# dblescape Function
#   Given an input string, it escapes all double quotes and escape characters.
# Version
#   1.0
# Parameters
#   string input
#     The input text.
# Printed
#   Prints out the escaped string.
#.

dblescape()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%[\\\"]*}"
		test "$piece" = "$str" && break
		local chr="${str#"$piece"}"
		str="${str#*[\\\"]}"
		printf %s%s "$piece" "\\${chr%"$str"}"
	done

	printf %s "$str"
}

##
# dblquote Function
#   Given an input string, it escapes all double quotes and escape characters.
#   Do note that this function does not surround the resulting string with
#   quotes.
# Version
#   1.0
# Parameters
#   string input
#     The input text.
# Printed
#   Prints out the quoted string.
#.

dblquote()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%[\\\"]*}"
		test "$piece" = "$str" && break
		local chr="${str#"$piece"}"
		str="${str#*[\\\"]}"
		printf %s%s "$piece" "\\${chr%"$str"}"
	done

	printf %s "$str"
}

undblquote()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%\\?*}"
		test "$piece" = "$str" && break
		local chr="${str#*\\}"
		str="${chr#?}"
		printf %s%s "$piece" "${chr%"$str"}"
	done

	printf %s "$str"
}

targetcmd()
{
	cmd=$1; shift;

	case "$cmd" in
		add)
			target=""
			srcfile="sources"
			eval `getopt_long s: s,srcfile -- "$@"`
			if [ -n "$err" ] ; then echo "$err" ; exit 1 ; fi
			test -z "$target" && read -p"Target name: " target

			if findtarget "$srcfile" "$target" ; then
				echo "Target '$target' already exists" >&2
				exit 1
			fi

			for arg in "$@"
			do
				test -z "${arg%%-*}" && continue

				printf "Target\n\tOutput\t\"%s\"\nEndTarget\n" `dblescape "$arg"` >> "$srcfile"
			done

			;;

		*)
			usage 2
			exit 1
			;;
	esac
}

testcmd()
{
	cmd=$1; shift;

	case "$cmd" in
	add)
		test -z "$1" && echo "no tests to install" >&2 && exit 1

		for name in "$@"
		do
			test ! -d mktests && echo "bmake build system not detected, aborting" >&2 && exit 1

			match=""
			for file in "$sharedir"/mktests/*
			do
				if [ "${file##*/[0-9][0-9]-}" = "$name" ] ; then
					match="$file" ; break
				fi
			done

			test -z "$match" && echo "No test '$name', aborting" >&2 && exit 1

			cp "$file" mktests
			echo "installed test '$name'"
		done
		;;
	*)
		usage 2 ; exit 1 ;;
	esac
}

##
# cmd Function
#   Process any passed commands.
#.

cmd()
{
	if [ "$#" -eq 0 ] ; then
		usage
		exit
	fi

	cmd=$1 ; shift

	case "$cmd" in
		install | update ) "cmd_$cmd" "$@" ;;
		
		target | test )
			"${cmd}cmd" "$@" ;;
		
		help | -? | --help)
			usage
			;;

		*)
			echo "Unknown command '$cmd'" >&2
			echo >&2
			usage 2
			exit 1
			;;
	esac
}

##
# cmd_install Function
#   Process the install command.
#.

cmd_install()
{
	eval `getopt_long bf? b,bare f,force ?,help -- "$@"`

	if [ "$err" ] || [ "$help" ] ; then
		test "$err" && fd=2 || fd=1
		cat <<EOF >&$fd
bmake install [options]

Install a BetterMake environment to the current directory.

Possible options are:
  -?,--help   Display this information
  -b,--bare   Produce a bare BetterMake environment, installing no tests
  -f,--force  Force a new installation even if a previous install is detcted
EOF
		return
	fi

	if [ -z "$force" ] ; then
		for file in "Makefile.in" "configure"
		do
			test -e "$file" || continue

			echo "$file already exists, cowardly giving up" >&2
			exit 1
		done
	fi

	copyfile "Makefile.in"
	copyfile "configure" 0755
	test ! -d mktests && mkdir mktests

	if [ -z "$bare" ] ; then
		for file in "mktests/00-cc" "mktests/00-ld"
		do
			copyfile "$file" 0755
		done
	fi
}

##
# cmd_update Function
#   Process the update command.
#.

cmd_update()
{
	eval `getopt_long f? f,force v,verbose ?,help -- "$@"`

	if [ "$err" ] || [ "$help" ] ; then
		test "$err" && fd=2 || fd=1
		cat <<EOF >&$fd
bmake update [options]

Update the BetterMake environment, copying any updated build files and tests
to the current project. Note that any modified files will be flagged to
prevent ovewriting user modifications.

Possible options are:
  -?,--help     Display this information
  -f,--force    Force the update even if file have been modified
  -v,--verbose  Print verbose information.
EOF
		return
	fi

	if [ -z "$force" ] ; then
		for file in configure Makefile.in mktests/[0-9][0-9]-*
		do
			test -f "$file" || break
			test ! -f "$sharedir/$file" && continue

			if ! checkfile "$file" ; then
				echo "File '$file' has been modified since last update. Giving up." >&2
				echo "Use '--force' to overwrite the modified file." >&2
				exit 1
			fi
			test "$verbose" && echo "~ ok file '$file'"
		done
	fi

	copyfile "configure" 0755
	test "$verbose" && echo "~ copied file 'configure'"
	copyfile "Makefile.in"
	test "$verbose" && echo "~ copied file 'Makefile.in'"

	test ! -d mktests && mkdir mktests
	for file in mktests/[0-9][0-9]-*
	do
		test -f "$file" || break

		copyfile "$file" 0755 || continue
		test "$verbose" && echo "~ copied file '$file'"
	done
}


# pass control to the command processor

cmd "$@"
