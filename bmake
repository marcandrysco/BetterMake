#!/bin/sh

sharedir="`dirname $0`/share"

##
# usage Function
#   Displays the usage information regarding the list of possible commands.
# Parameters
#   int fd = 1
#     Optional. The file descriptor number to send it to, often set to '2' for
#     error out.
#.

usage()
{
	if [ "$#" -eq 0 ] ; then
		fd=1
	else
		fd=$1
	fi

	cat <<USAGE >&$fd
bmake <command> [options]

Possible commands are:
  install
  update
  target add
  target remove
  target list
  source add
  source remove
  source list
  help
USAGE
}

##
# usage_test Function
#   Displays the usage information regarding the list of possible test commands.
# Parameters
#   int fd = 1
#     Optional. The file descriptor number to send it to, often set to '2' for
#     error out.
#.

usage_test()
{
	if [ "$#" -eq 0 ] ; then
		fd=1
	else
		fd=$1
	fi

	cat <<USAGE >&$fd
bmake test <command> [options]

Possible test commands are:
  add
  delete
USAGE
}

##
# getopt_long Function
#   Parses a list of options, retrieving all of the values and flags. The
#   returned data is valid POSIX shell code that should be evaluated in order
#   to obtain the desired parameters. For each long parameter, a variable is
#   created with that parameter's name. For all short parameters without a
#   long equivalent, then a variable with that single character is created.
#   All non-option parameters are skipped (anything that does not begin with a
#   dash).
# Version
#   1.0
# Parameters
#   string shortopts
#     A list of short options that are accepted. Options followed by a colon
#     denote that those options require values, otherwise the option is a flag
#     of '1' or '0'.
#   string longopt ...
#     A set of long options in the form 'o,optname' where 'o' is the short
#     option equivalent and 'optname' is the full long name.
#   -- args ...
#     After the string '--', all of the parameters are placed after it.
#     Generally the value '$@' should be passed.
# Return Value
#   The returned text should be dirctly evaluated using the 'eval' build-in
#   function. All the parameters will be stored in their respective variables.
#   If an error occurs during processing, then the value 'err' will be set to
#   a text error message.
#.

getopt_long()
{
	local opt="$1" ; shift
	echo "$opt" | grep -E "^:" >/dev/null 2>/dev/null && warn="" || warn="yes"

	local param=" "
	while [ "$1" != "--" ]
	do
		param="$param $1 " ; shift
	done
	shift

	echo "params='';"
	local short="" ; local long=""

	for arg in "$@"
	do
		if [ -n "$short" ] ; then
			if [ -z "$long" ] ; then
				echo -n "$short='$arg';"
			else
				echo -n "$long='$arg';"
			fi

			short="" ; long=""

			continue
		fi

		case "$arg" in
		--*)
			long=`echo "$arg" | sed 's/--\([^=]*\)\(=.*\)\?/\1/'`
			short=`echo "$param" | sed -n "s/.* \\(.\\),$long .*/\1/p"`

			if [ -z "$short" ] && [ -n "$warn" ] ; then
				echo "err=\"invalid parameter '--$long'\";"
				return 1
			fi

			if echo "$opt" | grep "$short:" >/dev/null 2>/dev/null ; then
				test -n "${arg%%*=*}" && continue
				echo -n "$long='"`echo "${arg#*=}" | sed "s/'/'\\\\\\\\''/g"`"';"
			else
				if echo "$arg" | grep "=" >/dev/null 2>/dev/null && [ -n "warn" ]; then
					echo "err=\"parameter '-$short,--$long' does not take a value\";"
					return 1
				fi

				echo -n "$long=1;"
			fi

			short="" ; long=""
			;;

		-*)
			arg=`echo $arg | tail -c+2`
			local needval=""
			while [ -n "$arg" ]
			do
				short=`echo $arg | head -c1`

				if ! echo "$opt" | grep "$short" >/dev/null 2>/dev/null ; then
					echo "err=\"invalid parameter '-$short'\";"
					return 1
				fi

				long=`echo "$param" | sed -n "s/.* $short,\\([^ ]*\\) .*/\1/p"`
				arg=`echo $arg | tail -c+2`

				if ! echo "$opt" | grep "$short:" >/dev/null 2>/dev/null ; then
					if [ -z "$long" ] ; then
						echo -n "$short=1;"
					else
						echo -n "$long=1;"
					fi

					continue
				fi

				if [ -n "$arg" ] ; then
					if [ -z "$long" ] ; then
						echo -n "$short='$arg';"
					else
						echo -n "$long='$arg';"
					fi
				else
					needval="1"
				fi

				break
			done

			if [ -z "$needval" ] ; then
				short="" ; long=""
			fi
			;;

		*)
			;;
		esac
	done

	if [ -n "$long" ] ; then
		echo "err=\"parameter '-$short,--$long' needs a value\";"
		return 1
	elif [ -n "$short" ] ; then
		echo "err=\"parameter '-$short' needs a value\";"
		return 1
	fi

	echo "err='';"
	return 0
}

##
# copyfile Function
#   Copies the given file, adding the md5sum for future checking.
# Parameters
#   string path
#     The output file path.
#   optional integer mode
#     Modifies the file mode through the chmod command.
#.

copyfile()
{
	echo "# Generated by BetterMake" > "$1"
	echo "# md5sum: "`md5sum "$sharedir/$1" | head -c32` >> "$1"
	echo >> "$1"
	cat "$sharedir/$1" >> "$1"

	test ! -z "$2" && chmod "$2" "$1"
}

##
# chkfile Function
#   Checks a file to verify that it has not been changed since the last bmake
#   install or update by verifying the MD5 checksum.
# Parameters
#   string path
#     The path to the file to be checked.
# Return Value
#   Returns '0' if the checksums match, non-zero if they do not match.
#.

chkfile()
{
	orig="`cat "$1" | sed -n '2p' | sed -n 's/^.*md5sum: \([0-9a-fA-F]*\).*$/\1/p'`"
	chk="`cat "$1" | sed -n '4,$p' | md5sum | head -c32`"

	if [ "$orig" = "$chk" ] ; then
		return 0
	else
		return 1
	fi
}

##
# quotify Function
#   Takes an input string and escapes all double quotes so that the output
#   string is useable inside double-quotes.
# Version
#   1.0
# Parameters
#   string input
#     The input text.
#.

quotify()
{
	echo "$1" | sed 's/"/\\"/g'
}

findtarget()
{
	target="`quotify "$2"`"
	grep -E "^[[:space:]]*Target[[:space:]]*\"$target\"[[:space:]]*$" "$1" >/dev/null 2>/dev/null
	return $?
}

##
# quote Function
#   Given the input string, it places it within single quotes, making sure that
#   any single quotes within the string are properly escaped.
# Version
#   1.0
# Parameters
#   string input
#     The input text.
# Printed
#   Prints out the quoted string.
#.

quote()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%\'*}"
		test "$piece" = "$str" && break
		printf "'%s'\\'" "$piece"
		str="${str#*\'}"
	done

	printf "'%s'" "$str"
}

dblquote()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%[\\\"]*}"
		test "$piece" = "$str" && break
		local chr="${str#"$piece"}"
		str="${str#*[\\\"]}"
		printf %s%s "$piece" "\\${chr%"$str"}"
	done

	printf %s "$str"
}

undblquote()
{
	local str="$*"

	while [ 1 ]
	do
		local piece="${str%%\\?*}"
		test "$piece" = "$str" && break
		local chr="${str#*\\}"
		str="${chr#?}"
		printf %s%s "$piece" "${chr%"$str"}"
	done

	printf %s "$str"
}

targetcmd()
{
	cmd=$1; shift;

	case "$cmd" in
		add)
			target=""
			srcfile="sources"
			eval `getopt_long s: s,srcfile -- "$@"`
			if [ -n "$err" ] ; then echo "$err" ; exit 1 ; fi
			test -z "$target" && read -p"Target name: " target

			if findtarget "$srcfile" "$target" ; then
				echo "Target '$target' already exists" >&2
				exit 1
			fi

			for arg in "$@"
			do
				test -z "${arg%%-*}" && continue

				printf "Target\n\tOutput\t\"%s\"\nEndTarget\n" `dblquote "$arg"` >> "$srcfile"
			done

			;;

		*)
			usage 2
			exit 1
			;;
	esac
}

testcmd()
{
	cmd=$1; shift;

	case "$cmd" in
	add)
		test -z "$1" && echo "no tests to install" >&2 && exit 1

		for name in "$@"
		do
			test ! -d mktests && echo "bmake build system not detected, aborting" >&2 && exit 1

			match=""
			for file in "$sharedir"/mktests/*
			do
				if [ "${file##*/[0-9][0-9]-}" = "$name" ] ; then
					match="$file" ; break
				fi
			done

			test -z "$match" && echo "No test '$name', aborting" >&2 && exit 1

			cp "$file" mktests
			echo "installed test '$name'"
		done
		;;
	*)
		usage 2 ; exit 1 ;;
	esac
}

##
# cmd_install Function
#   Processes an install command, copying the files into the target directory.
#   A force install will automatically overwrite any current files.
# Parameters
#   string params
#     The set of parameters to the command, generally '$@'.
#.

cmd_install()
{
	help="" ; force=""
	eval `getopt_long f? f,force ?,help -- "$@"`
	if [ -n "$err" ] ; then echo "$err" ; exit 1 ; fi

	if [ "$help" ] ; then
		cat <<USAGE
usage: bmake install [-f | --force]
Options
  -f, --force   Forces all files to be installed overwriting existing files
      --help    Produce this help message
USAGE
		exit 0
	fi

	if [ -z "$force" ] ; then 
		for file in "Makefile.in" "configure"
		do
			test -e "$file" || continue

			echo "$file already exists, cowardly giving up" >&2
			exit 1
		done
	fi

	copyfile "Makefile.in"
	copyfile "configure" 0755
	test ! -d mktests && mkdir mktests
}

##
# cmd_update Function
#   Updates the currently existing build files, replacing old files with the
#   new versions. Without the '--force' option, if any of the previous files
#   were modified, then the update will abort and an error will be reported.
# Parameters
#   string params
#     The set of parameters to the command, generally '$@'.
#.

cmd_update()
{
	help="" ; force=""
	eval `getopt_long f? f,force ?,help -- "$@"`
	if [ -n "$err" ] ; then echo "$err" ; exit 1 ; fi

	if [ "$help" ] ; then
		cat <<USAGE
usage: bmake update [-f | --force]
Options
  -f, --force   Forces all files to be updated, overwriting existing files
      --help    Produce this help message
USAGE
		exit 0
	fi

	if [ -z "$force" ] ; then 
		fail=""
		for file in "Makefile.in" "configure" "mktests/*"
		do
			test -f "$file" || continue
			chkfile "$file" && continue

			echo "error: $file has been modified since the last install or update" >&2
			fail=1
		done

		test "$fail" && exit 1
	fi

	copyfile "Makefile.in"
	copyfile "configure" 0755
	test ! -d mktests && mkdir mktests
	for file in "mktests/*"
	do
		test -f "$file" || continue
		copyfile "$file" 0755
	done
}

##
# cmd_test Function
#   Determine the desired test command, producing an error on invalid input.
# Parameters
#   string params
#     The set of parameters to the command, generally '$@'.
#.

cmd_test()
{
	if [ "$#" -eq 0 ] ; then
		usage_test
		exit
	fi

	cmd="$1" ; shift
	case "$cmd" in
	add)
		cmd_test_add "$@"
		;;

	--help)
		usage_test
		exit
		;;

	*)
		echo "invalid command 'test $cmd'" >&2
		echo >&2
		usage_test 2
		exit 1
	esac
}

##
# cmd_test_add
#   Adds the given tests to the current build system, verifying that they have
#   not previously been installed.
# Parameters
#   string params
#     The set of parameters to the command, generally '$@'.
#.

cmd_test_add()
{
	help="" ; force=""
	eval `getopt_long f? f,force ?,help -- "$@"`
	if [ -n "$err" ] ; then echo "$err" ; exit 1 ; fi

	if [ "$help" ] ; then
		cat <<USAGE
usage: bmake install [-f | --force]
Options
  -f, --force   Forces all files to be installed overwriting existing files
      --help    Produce this help message
USAGE
		exit 0
	fi

	test -z "$force" && test ! -d mktests && echo "bmake build system not detected, aborting" >&2 && exit 1

	for name in "$@"
	do
		test -z "${name%%-*}" && continue

		match=""
		for file in "$sharedir"/mktests/*
		do
			if [ "${file##*/[0-9][0-9]-}" = "$name" ] ; then
				match="${file#"$sharedir/"}" ; break
			fi
		done

		test -z "$match" && echo "test '$name' not found, aborting" >&2 && exit 1

		if [ ! "$force" ] && [ -f "$match" ] ; then
			echo "test '$name' already exists, skipping"
		else
			copyfile "$match" 0755
			echo "installed test '$name'"
		fi
	done
}

# Verify we have a command
if [ "$#" -eq 0 ] ; then
	usage
	exit
fi

# Process the current command, passing to the proper handler
cmd="$1" ; shift
case "$cmd" in
	install) cmd_install "$@" ;;
	update) cmd_update "$@" ;;
	test) cmd_test "$@" ;;
	
	target | test )
		"${cmd}cmd" "$@" ;;
	
	help | -? | --help)
		usage
		;;

	*)
		echo "invalid command '$cmd'" >&2
		echo >&2
		usage 2
		exit 1
		;;
esac
